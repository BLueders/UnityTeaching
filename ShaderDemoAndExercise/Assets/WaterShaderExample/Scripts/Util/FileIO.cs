//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.IO;
using UnityEngine;

public class FileIO {

    public static string relativePath = "/Resources/Textures/Heightmap/";
    public static string absolutePath = string.Format("{0}{1}", Application.dataPath, relativePath);

    private static string GenerateFileName(string name) {
        return string.Format("{0}-{1}.png", name, System.DateTime.Now.ToString("yyyy-MM-dd_HH-mm-ss"));
    }

    private static string GenerateFilePath(string fileName) {
        return string.Format("{0}{1}", relativePath, fileName);
	}
	
    public static string ExportToPNG(byte[] bytes, string name) {
		CreateDirectoryIfNessecary();
		
        string filename = GenerateFileName(name);
        string path = GenerateFilePath(filename);
		
		Debug.Log("Saving PNG...");
		
        string absolutePath = string.Format("{0}{1}", Application.dataPath, path);

        System.IO.File.WriteAllBytes(absolutePath, bytes);
        Debug.Log(string.Format("Saved PNG to: {0}", absolutePath));

        return filename;
	}
	
	private static void CreateDirectoryIfNessecary() {
        if (!Directory.Exists(absolutePath)) {
            Debug.Log (string.Format("Creating directory {0}...", absolutePath));
            Directory.CreateDirectory(absolutePath);
		}
	}

	public static string[] DirectoryListing() {
		CreateDirectoryIfNessecary();

        string[] files = Directory.GetFiles(absolutePath, "*.png");
	
		for (int i = 0; i < files.Length; i++) {
			files[i] = Path.GetFileName(files[i]);
		}
		return files;
	}

	public static Texture2D LoadPNGLocal(String fileName, int width, int height) {
        return LoadPNG(absolutePath + fileName, width, height);
	}

	public static Texture2D LoadPNG(string filePath, int width, int height) {

		Debug.Log("Loading image " + filePath + " dimensions: " + width + "x" + height);
		Texture2D tex = null;
		byte[] fileData;
		
		if (File.Exists(filePath))     {
			fileData = File.ReadAllBytes(filePath);
			tex = new Texture2D(2, 2);
			tex.LoadImage(fileData); //..this will auto-resize the texture dimensions.

			if (tex.width != width || tex.height != height) {
				tex = Resize(tex, width, height);
			}

			tex.wrapMode = TextureWrapMode.Clamp;

			Debug.Log("Success! Loaded image with dimensions " + tex.width + "x" + tex.height);
		} else {
			Debug.LogError("File " + filePath + " did not exist");
		}
		return tex;
	}

	private static Texture2D Resize(Texture2D source, int width, int height) {
		Debug.Log("Resizing image from " + source.width + "x" + source.height + " to " + width + "x" + height);

		Texture2D result = new Texture2D(width, height, source.format, false);
	
		for (int y = 0; y < result.height; ++y) {
			for (int x = 0; x < result.width; ++x) {
				Color newColor = source.GetPixelBilinear((float)x / (float)result.width, (float)y / (float)result.height);
				result.SetPixel(x, y, newColor);
			}
		}
		result.Apply();

		Debug.Log("Done resizing.");

		return result;
	}
}


